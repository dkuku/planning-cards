{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Card","props","number","nextPage","className","onClick","style","fontSize","Keyboard","numbers","map","n","Button","key","App","useState","currentNumber","Array","keys","slice","useEffect","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAmBA,SAASA,EAAKC,GAAQ,IACbC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACf,OACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,0CAA0CC,QAAS,kBAAKF,EAAS,QAA9E,WACA,uBAAGC,UAAU,uCAAuCE,MAAO,CAACC,SAAU,SACnEL,IAKT,SAASM,EAASP,GAAQ,IACjBQ,EAAqBR,EAArBQ,QAASN,EAAYF,EAAZE,SAChB,OACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,2CAAb,iBACA,yBAAKA,UAAU,kBACZK,EAAQC,KAAI,SAAAC,GAAI,OAAO,kBAACC,EAAD,CAAQC,IAAKF,EAAGT,OAAQS,EAAGR,SAAUA,SAMrE,SAASS,EAAOX,GAAQ,IACjBC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACb,OAAQ,oCACR,4BAASE,QAAS,kBAAKF,EAASD,IAC9BE,UAAU,yFACTF,IAKUY,MAjDf,WAAgB,IAAD,EACqBC,mBAAS,MAD9B,mBACNC,EADM,KACSb,EADT,KAEPM,EAAU,sBAAIQ,MAAM,IAAIC,QAAd,CAAsB,IAAK,MAAKC,MAAM,GAItD,OAHAC,qBAAU,WACRC,QAAQC,IAAIN,MAGZ,yBAAKZ,UAAU,uBACZY,EACA,kBAAChB,EAAD,CAAME,OAAQc,EAAeb,SAAUA,IAEvC,kBAACK,EAAD,CAAUC,QAASA,EAASN,SAAUA,MCFzBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.5ae3fa7f.chunk.js","sourcesContent":["import React, {useState, useEffect, useFocusEffect} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [currentNumber, nextPage] = useState(null);\n  const numbers = [...Array(11).keys(), \"?\", \"0\"].slice(1)\n  useEffect(() => {\n    console.log(currentNumber)\n  })\n  return (\n    <div className=\"flex justify-center\">\n      {currentNumber ? \n       <Card number={currentNumber} nextPage={nextPage} />\n       :\n       <Keyboard numbers={numbers} nextPage={nextPage} />\n      }\n    </div>\n  );\n}\nfunction Card(props) {\n  const {number, nextPage} = props\n  return (\n    <div className=\"flex flex-col justify-center\">\n      <a className=\"justify-center h-16 p-4 m-auto text-2xl\" onClick={()=> nextPage(null)}>Go Back</a>\n      <p className=\"justify-center h-screen align-center\" style={{fontSize: \"60vh\"}}>\n        {number}\n      </p>\n    </div>\n  )\n}\nfunction Keyboard(props) {\n  const {numbers, nextPage} = props\n  return (\n    <div className=\"flex flex-col justify-center\">\n      <p className=\"justify-center h-16 p-4 m-auto text-2xl\">Choose points</p>\n      <div className=\"flex flex-wrap\">\n        {numbers.map(n=>{return <Button key={n} number={n} nextPage={nextPage}/>})}\n      </div>\n    </div>\n  )\n}\n\nfunction Button(props) {\nconst {number, nextPage} = props\n  return (<>\n  <button  onClick={()=> nextPage(number)} \n    className=\"w-32 w-1/3 h-32 px-4 py-2 text-3xl font-bold text-black bg-blue-100 hover:bg-blue-300\">\n    {number}\n  </button>\n  </>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}